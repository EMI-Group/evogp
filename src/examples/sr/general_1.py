import sys
sys.path.append("/home/kelvin/test/TensorGP")
import jax
import jax.numpy as jnp
import numpy as np
from src.algorithm import GeneticProgramming as GP
from src.algorithm import DiscreteConst
from src.algorithm import BasicCrossover, BasicMutation, SinglePointMutation, HoistMutation, LambdaPointMutation
from src.algorithm import BasicSelection, TruncationSelection, RouletteSelection, RankSelection, TournamentSelection
from src.pipeline import General
from src.problem.func_fit import GeneralFuncFit
import time

def main():
    alg = GP(
        pop_size=10,
        num_inputs=2,
        num_outputs=1,
        max_len = 40,
        crossover=BasicCrossover(),
        mutation=BasicMutation(),
        selection=TournamentSelection(3, 0.9),
        const=DiscreteConst(
            jax.numpy.array([-1., 0., 1.])
        ),
        leaf_prob=[0, 0, 0, 0, 1, 1, 1, 1, 1, 1]
    )

    # create general function fitting problem and then initialize it
    # in this example, all data points are generated by sampling from a grid of 2D points
    prob = GeneralFuncFit(
        func=lambda x: (x[0] ** 4 / (x[0] ** 4 + 1) + x[1] ** 4 / (x[1] ** 4 + 1)),
        low_bounds=jax.numpy.array([-5, -5]),
        upper_bounds=jax.numpy.array([5, 5]),
    )
    prob.generate(
        method='sample',
        num_samples=8*8,
    )
    print("-------finished----------")

    pipeline = General(alg, prob)

    key = jax.random.PRNGKey(42)
    state = pipeline.setup(key)

    jit_step = jax.jit(pipeline.step)
    # jit_step = pipeline.step

    start_time = time.time()
    for i in range(10):
        state, fitnesses = jit_step(state)

        fitnesses = jax.device_get(fitnesses)
        print(f'max: {np.max(fitnesses)}, min: {np.min(fitnesses)}, mean: {np.mean(fitnesses)}')
        # from src.cuda.utils import from_cuda_node
        # trees = pipeline.algorithm.ask(state.alg_state)
        # print(from_cuda_node(trees))
        # print(trees.shape)
    
    end_time = time.time()
    print(f"Execution time: {end_time - start_time} seconds")

if __name__ == '__main__':
    main()